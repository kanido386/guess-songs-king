#!/usr/bin/env node
/* eslint-disable no-shadow */
/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
 */

const http = require('http');
const debug = require('debug')('backend:server');
const { Server } = require('socket.io');
const app = require('../app');

require('dotenv').config();

// const { FRONTEND_URL } = process.env;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// TODO: =============== socket part ===============

const io = new Server(server, {
  cors: {
    // FIXME:
    // orgin: FRONTEND_URL,
    orgin: '*',
    methods: ['GET', 'POST'],
  },
});

// FIXME:
const pinList = [];
const hostList = {};

io.on('connection', (socket) => {
  console.log(`User connected: ${socket.id}`);

  socket.on('init-game', (data) => {
    socket.join(data.pin);
    console.log(data.pin);
    pinList.push(data.pin);
    hostList[data.pin] = data.id;
    console.log(data);
  });

  socket.on('join', (data) => {
    console.log(data);
    if (!pinList.includes(data.pin)) {
      // https://stackoverflow.com/questions/45951126/socket-tosocket-id-emit-does-not-work
      socket.emit('join-error');
      return;
      // socket.to(data.id).emit('error', {
      //   message: 'That was amazing!',
      // });
    }
    socket.join(data.pin);
    socket.emit('join-success');
  });

  socket.on('add-nickname', (data) => {
    console.log(hostList[data.pin]);
    socket.to(hostList[data.pin]).emit('add-player', {
      nickname: data.nickname,
      id: data.id,
    });
  });

  socket.on('add-player-error', (data) => {
    console.log('error', data.id);
    socket.to(data.id).emit('add-nickname-error');
  });

  socket.on('add-player-success', (data) => {
    socket.to(data.id).emit('add-nickname-success');
  });

  socket.on('start-game', (data) => {
    socket.broadcast.to(data.pin).emit('start');
  });

  socket.on('get-ready', (data) => {
    socket.broadcast.to(data.pin).emit('ready');
  });

  // socket.on('send', (data) => {
  //   console.log(data);
  //   // socket.broadcast.emit('host', data);
  //   socket.to(data.room).emit('host', data);
  // });
});

// TODO: =============== socket part ===============

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
